---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app radarr
  namespace: default
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 3.4.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
      interval: 5m
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      radarr:
        type: deployment
        initContainers:
          init:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16.3
              pullPolicy: IfNotPresent
            envFrom: &envFrom
              - secretRef:
                  name: postgres-radarr
        pod:
          securityContext:
            runAsUser: 568
            runAsGroup: 568
            fsGroup: 568
            runAsNonRoot: true
            fsGroupChangePolicy: "OnRootMismatch"
            supplementalGroups:
              - 65539
        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/radarr-develop
              tag: 5.10.0.9090@sha256:3802c38f08a3350637d6d9ba10a35a89b791afd95c2e4e7e7402e69c0910b50c
              pullPolicy: IfNotPresent
            env:
              TZ: "UTC"
            envFrom: *envFrom
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
    service:
      app:
        controller: *app
        ports:
          http:
            port: &port 7878
    # ingress:
    #   app:
    #     enabled: true
    #     className: internal
    #     hosts:
    #       - host: &host "radarr.garb.dev"
    #         paths:
    #           - path: /
    #             service:
    #               identifier: app
    #               port: http
    #     tls:
    #       - hosts:
    #           - *host
    #         secretName: wildcard-cert-tls
    route:
      app:
        enabled: true
        parentRefs:
          - name: envoy-internal
            namespace: networking
        hostnames:
          - "radarr.garb.dev"
        rules:
          - backendRefs:
              - port: *port
                name: *app
      cilium:
        enabled: true
        parentRefs:
          - name: cilium-internal
            namespace: networking
        hostnames:
          - "radarr-cilium.garb.dev"
        rules:
          - backendRefs:
              - port: *port
                name: *app
    persistence:
      config:
        enabled: true
        existingClaim: config-radarr-3
        globalMounts:
          - path: /config
      media:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "192.168.1.3"
            path: /volume2/media-sp2/Movies
        globalMounts:
          - path: /movies
      downloads:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "192.168.1.3"
            path: /volume2/media-sp2/Downloads
        globalMounts:
          - path: /downloads
