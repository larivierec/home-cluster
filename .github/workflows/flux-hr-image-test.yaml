---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Container Check"
on:
  pull_request:
    branches: ["main"]
    paths: ["kubernetes/**"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

jobs:
  changed-clusters:
    name: Changed Clusters
    runs-on:
      - ubuntu-24.04
    outputs:
      chnaged_files: ${{ steps.changed-files.outputs.changed_files }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Get Changed Files
        id: changed-files
        uses: bjw-s-labs/action-changed-files@2cc35474e9d534ed0d743aa122fd142afbdaa0ad # v0.3.1
        with:
          patterns: kubernetes/**

  extract-images:
    name: Extract Images
    needs:
      - changed-clusters
    runs-on:
      - garb-arc-runner-set
    if: ${{ needs.changed-clusters.outputs.chnaged_files != '[]' }}
    strategy:
      matrix:
        branches: ["default", "pull"]
        cluster: ["main"]
      fail-fast: false
    outputs:
      default: ${{ steps.output-images.outputs.default }}
      pull: ${{ steps.output-images.outputs.pull }}
    steps:
      - name: Get Secrets
        uses: larivierec/sm-action@main
        with:
          access_token: ${{ secrets.BW_ACCESS_TOKEN }}
          parse_json: "true"
          secrets: |
            4c93fe22-dd57-4d4d-96b2-b20600132b47
      - name: Extract Secret Values
        id: parse-secrets
        run: |
          echo "bot_app_id=$BOT_ID" >> "$GITHUB_OUTPUT"
          echo "bot_app_private_key=$BOT_PK_B64" >> "$GITHUB_OUTPUT"
      - name: Decode Private Key Securely
        id: decode
        run: |
          private_key=$(echo "${{ steps.parse-secrets.outputs.bot_app_private_key }}" | base64 -d | awk 'BEGIN {ORS="\\n"} {print}' | head -c -2) &> /dev/null
          echo "::add-mask::$private_key"
          echo "private-key=$private_key" >> "$GITHUB_OUTPUT"
      - name: Generate Token
        uses: actions/create-github-app-token@af35edadc00be37caa72ed9f3e6d5f7801bfdf09 # v1
        id: app-token
        with:
          app-id: ${{ steps.parse-secrets.outputs.bot_app_id }}
          private-key: ${{ steps.decode.outputs.private-key }}

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: "${{ matrix.branches == 'default' && github.event.repository.default_branch || '' }}"

      - name: Gather Images
        uses: docker://ghcr.io/allenporter/flux-local:v7.3.0
        with:
          args: >-
            get cluster
            --all-namespaces
            --path /github/workspace/kubernetes/${{ matrix.cluster }}
            --enable-images
            --only-images
            --output json
            --output-file images.json
      - name: Output Images
        id: output-images
        run: echo "${{ matrix.branches }}=$(jq --compact-output '.' images.json)" >> "$GITHUB_OUTPUT"

  compare-images:
    name: Compare Images
    runs-on:
      - ubuntu-24.04
    needs:
      - changed-clusters
      - extract-images
    outputs:
      images: ${{ steps.compare-images.outputs.images }}
      if: ${{ needs.changed-clusters.outputs.chnaged_files != '[]' && needs.extract-images.outputs.default != needs.extract-images.outputs.pull }}
    steps:
      - name: Compare Images
        id: compare-images
        run: |
          images=$(jq --compact-output --null-input \
              --argjson f1 '${{ needs.extract-images.outputs.default }}' \
              --argjson f2 '${{ needs.extract-images.outputs.pull }}' \
              '$f2 - $f1' \
          )
          echo "images=${images}" >> "$GITHUB_OUTPUT"

  check-images:
    name: Check Images
    runs-on:
      - ubuntu-24.04
    needs:
      - compare-images
    if: ${{ needs.compare-images.outputs.images != '[]' && needs.compare-images.outputs.images != '' }}
    steps:
      - name: Check Images
        id: check
        run: |
          missing_images=()

          for image in $(echo '${{ needs.compare-images.outputs.images }}' | jq -r '.[]'); do
              echo "Checking image: $image"
              
              clean_image=$(echo "$image" | sed -E 's/@sha256:[a-f0-9]+//')
              digest=$(echo "$image" | grep -o 'sha256:[a-f0-9]\+')

              if docker manifest inspect "$clean_image" > /dev/null 2>&1; then
                  echo "✅ Image $clean_image exists!"

                  if [[ -n "$digest" ]]; then
                      found=$(docker manifest inspect "$clean_image" | jq -r --arg digest "$digest" '.manifests[]?.digest | select(. == $digest)')
                      
                      if [[ -n "$found" ]]; then
                          echo "✅ Digest $digest is present in the manifest!"
                      else
                          echo "⚠️ Warning: Digest $digest is NOT in the manifest!"
                          missing_images+=("$image")
                      fi
                  fi
              else
                  echo "❌ Image $clean_image does NOT exist!"
                  missing_images+=("$image")
              fi
          done

          if [ ${#missing_images[@]} -ne 0 ]; then
              echo "⛔ The following images are missing or have mismatched digests: ${missing_images[*]}"
              exit 1
          fi
