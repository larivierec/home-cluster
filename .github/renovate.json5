{
  "extends": [
    "github>larivierec/home-cluster//.github/renovate/autoMerge",
    "github>larivierec/home-cluster//.github/renovate/disabledDatasources",
    ":enableRenovate",
    ":dependencyDashboard",
    ":disableRateLimiting",
    ":automergeDigest",
    ":semanticCommits",
    "config:base"
  ],
  "username": "theriver-bot[bot]",
  "repositories": [
    "larivierec/home-cluster"
  ],
  "assignees": [
    "larivierec"
  ],
  "platform": "github",
  "timezone": "America/New_York",
  "suppressNotifications": ["prIgnoreNotification"],
  "dependencyDashboardTitle": "Renovate Dashboard",
  "rebaseWhen": "conflicted",
  "requireConfig": "optional",
  "onboarding": false,
  "gitAuthor": "theriver-bot <98402334+theriver-bot[bot]@users.noreply.github.com>",
  "ignoreDeps": [
    "ghcr.io/fluxcd/helm-controller",
    "ghcr.io/fluxcd/image-automation-controller",
    "ghcr.io/fluxcd/image-reflector-controller",
    "ghcr.io/fluxcd/kustomize-controller",
    "ghcr.io/fluxcd/notification-controller",
    "ghcr.io/fluxcd/source-controller"
  ],
  "helm-values": {
    "fileMatch": ["cluster/.+\\.ya?ml$"],
  },
  "kubernetes": {
    "fileMatch": ["cluster/.+\\.ya?ml$"],
  },
  "terraform": {
    "fileMatch": ["provision/.+\\.tf$"],
  },
  "flux": {
    "fileMatch": [
      "kubernetes/.+\\.ya?ml$"
    ]
  },
  "regexManagers": [
    {
      "description": "Process CRD dependencies",
      "fileMatch": ["kubernetes/.+\\.ya?ml$"],
      "matchStrings": [
        // GitRepository where 'Git release/tag' matches 'Helm' version, used when crds are in a folder
        "registryUrl=(?<registryUrl>\\S+) chart=(?<depName>\\S+)\n.*?(?<currentValue>[^-\\s]*)\n",
        // GitRepository where 'Git release/tag' matches 'Helm' version, used for when crd is a file
        "registryUrl=(?<registryUrl>\\S+) chart=(?<depName>\\S+)\n *#?- https:\\/\\/raw.githubusercontent.com\\/([\\w\\d\\-_]+\\/[\\w\\d\\-_]+)\\/(?<currentValue>[\\w\\d\\.\\-_]+)\\/.*\n",
        "registryUrl=(?<registryUrl>.*?)\n *tag: (?<depName>[a-zA-Z-]+)-(?<currentValue>.*)\n",
        // Kustomization where 'GitHub release artifact URL' matches 'Docker image' version
        "datasource=(?<datasource>\\S+) image=(?<depName>\\S+)\n.*?-\\s(.*?)\/(?<currentValue>[^/]+)\/[^/]+\n",
        // Kustomization where 'GitHub release artifact URL' matches 'Docker image' version
        "datasource=(?<datasource>\\S+) image=(?<depName>\\S+)\n *#?- https:\\/\\/raw.githubusercontent.com\\/([\\w\\d\\-_]+\\/[\\w\\d\\-_]+)\\/(?<currentValue>[\\w\\d\\.\\-_]+)\\/.*\n"
      ],
      "datasourceTemplate": "{{#if datasource}}{{{datasource}}}{{else}}helm{{/if}}"
    }
  ],
  "packageRules": [
    // Setup datasources
    {
      "matchDatasources": ["helm"],
      "semanticCommitScope": "charts",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "to {{{newValue}}}",
      "separateMinorPatch": true,
      "ignoreDeprecated": true,
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(charts)!: ",
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
    },
    {
      "matchDatasources": ["docker"],
      "enabled": true,
      "matchUpdateTypes": ["major", "minor", "patch"]
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(images)!: ",
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
    },
    {
      "matchDatasources": ["terraform-provider"],
    },
    {
      "description": "minio",
      "matchDatasources": ["docker"],
      "versioning": "regex:^RELEASE\\.(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)T.*Z(-(?<compatibility>.*))?$",
      "matchPackageNames": ["quay.io/minio/minio"]
    },
    {
      "matchDatasources": ["docker"],
      "versioning": "loose",
      "matchPackageNames": [
        "ghcr.io/onedr0p/plex",
        "ghcr.io/onedr0p/plex-beta",
      ]
    },
  ],
}

